---
title: "MAPBM Informe local"
lang: es
# author:
#   - name: nombre autor
#     affiliations:
#       - name: nombre afiliacion
#       - name: nombre afiliacion2
#       - name: nombre afiliacion3
#date: 
# bibliography:
#   - referencias.bib
# csl: nature-brackets.csl  
format: 
  html:
    embed-resources: true
    #toc: true
    #toc-depth: 4
    highlight-style: pygments
    code-fold: true
    html-math-method: katex
    grid:
       body-width: 1300px
execute: 
  echo: false
  warning: false
  cache: false
---

```{r,output=FALSE}
#| label: cargar paquetes

library(ggplot2)
library(purrr)
library(dplyr)
library(Hmisc) 
library(DBI)
library(logger)
library(stringr)
library(plotly)
library(cowplot)
library(tidyr)
library(gt)
library(duckdb)
log_info(paste0("Create cohorts"))
database_path <- '../../inputs/data.duckdb'
database_result_path <- './result.duckdb'
directorio_sql <- "aux_files/queries/indicators/"  
directorio_cohorts <- "aux_files/cohorts/"
directorio_composites <- "aux_files/composites/"
options(scipen = 999)
file_to_remove <- './result.duckdb'
if (file.exists(file_to_remove)){
  file.remove(file_to_remove)
}

```

```{r}
s <- Sys.getenv("PIPELINE_VERSION")

log_info(paste0("Versión de los análisis: ",s))
```


<p> Versión de los análisis: `r paste0(s)` </p>

```{r, output = FALSE}
#| label: indicadores queries



con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)
hospital <- dbGetQuery(con, "select * from hospital")

log_info(paste0("Create cohorts"))

source('./aux_files/create_cohorts.R')


dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)

```


# Hospital: `r hospital$cnh_nm`

::: {.callout-tip collapse="true"}
# Nota informativa

La **información para cada cohorte** (pestaña) se encuentra en el **siguiente orden**:
 
  1) Descriptivos
 
  2) Indicadores *Process*:
  
      2.1) Pilar I
  
      2.2) Pilar II
  
      2.3) Pilar III

  3) Indicadores *Composite* (para las cohortes de Artroplastias primarias de rodilla y Artroplastias primarias de cadera)
 
  4) Indicadores *Outcome*
 
  5) Tabla indicadores

**N.B.**: Las figuras (excepto pirámide) y tabla son interactivas y aportan información al colocar el cursor sobre ellas.
 
:::


::: {.panel-tabset}

## Artroplastias primarias de rodilla

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo prod

log_info(paste0("Descriptive prod"))

cohort_ <- 'prod'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')

log_info(paste0("Create composites"))

source('./aux_files/create_composites.R')

dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.cirugia_programada_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}
data_comorbidities <- dbGetQuery(con, paste0("select cohort,año_cd,count(distinct episode_id) as n_episode_id,
sum(aids_bl::INT) as 'SIDA',
sum(ami_bl::INT) as 'Infarto agudo miocardio',
sum(chf_bl::INT) as 'Insuficiencia cardíaca congestiva',
sum(ckd_bl::INT) as 'Enfermedad renal crónica',
sum(copd_bl::INT) as 'EPOC',
sum(ctp_bl::INT) as 'Patología del tejido conectivo',
sum(cvd_bl::INT) as 'Enfermedad cerebrovascular',
sum(dementia_bl::INT) as 'Demencia',
sum(hemiplegia_bl::INT) as 'Hemiplejia',
sum(leuk_bl::INT) as 'Leucemia',
sum(lymph_bl::INT) as 'Linfoma',
sum(mildliver_bl::INT) as 'Enfermedad Hepática Leve',
sum(mtx_bl::INT) as 'Metástasis',
sum(orgdiab_bl::INT) as 'DM con lesión orgánica',
sum(peptic_bl::INT) as 'Enfermedad ulcerosa',
sum(pvd_bl::INT) as 'Enfermedad vascular periférica',
sum(severeliver_bl::INT) as 'Enfermedad hepática moderada/grave',
sum(tumor_bl::INT) as 'Tumor sólido',
sum(uncdiab_bl::INT) as 'DM no complicada' from (
select a.cohort,year(a.start_intervention_dt) as año_cd ,b.* from cirugia_programada_cohort a
left join comorbidities b
on a.patient_id = b.patient_id and a.episode_id = b.episode_id ) group by cohort,año_cd"))

dbDisconnect(con, shutdown=TRUE)

data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process prod

log_info(paste0("Indicators prod"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)
ind_serie_temp_process <- data.frame(ind=c('indicator_05','indicator_06',
                                   'indicator_07','indicator_08','indicator_09','indicator_10',
                                   'indicator_11','indicator_12','indicator_13','indicator_14',
                                   'indicator_15','indicator_16','indicator_17','indicator_18',
                                   'indicator_21','indicator_22',
                                   'indicator_23','indicator_24','indicator_25','indicator_26',
                                   'indicator_27','indicator_28','indicator_29','indicator_30',
                                   'indicator_31','indicator_32'),
                             descrip = c('% de pacientes con evaluación de la anemia preoperatoria con tiempo suficiente',
                                          '% de pacientes anémicos en preoperatorio con estudio del metabolismo del hierro',
                                        '% de pacientes anémicos en preoperatorio con estudio del metabolismo del hierro (Hb<13)',
                                        '% de pacientes anémicos con determinación de concentración Hb reticulocitaria',
                                        '% de pacientes anémicos con determinación de concentración Hb reticulocitaria idem Hb<13',
                                        '% de pacientes anémicos tratados preoperatoriamente con tiempo suficiente',
                                        '% de pacientes anémicos tratados preoperatoriamente con tiempo suficiente Hb<13',
                                        '% de pacientes anémicos tratados preoperatoriamente con tiempo suficiente \n(anémicos y no anémicos)','% de pacientes con Hb de control',
                                        '% de pacientes tratados preoperatoriamente con un incremento de Hb de +1 pto',
                                        'Incremento de Hb post tratamiento preoperatorio',
                                        '% de pacientes no transfundidos con hematíes en preoperatorio',
                                        '% de pacientes no transfundidos con plasma en preoperatorio',
                                        '% de pacientes no transfundidos con plaquetas en preoperatorio',
                                        '% de pacientes intervenidos sin anemia',
                                        '% de pacientes intervenidos sin anemia Hb>=13',
                                        'Valor  de Hb previo a la intervención',
                                        '% de pacientes tratados postoperatoriamente con hierro IV',
                                        '% de pacientes con anestesia regional',
                                        '% de pacientes tratados con antifibrinolíticos',
                                        '% de pacientes con uso de recuperadores de sangre',
                                        '% de pacientes tratados con fibrinógeno',
                                        '% de pacientes tratados con fibrinógeno \nidem para todos, con y sin valor de conc.fibrin.',
                                        '% de pacientes transfundidos con Hb < 8 g/dl',
                                        'Valor de Hb previo a la transfusión',
                                        '% de transfusiones de una sola unidad de hematíes'))


plot_serie_temp <- function(i){
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
  data_filter <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  if(i %in% c('indicator_15','indicator_19','indicator_23','indicator_31')){
    if(nrow(data_filter)>0){
    data_filter$mes_año_format <- format(data_filter$month_year, "%Y-%m")
    data_long <- data_filter %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = ind_serie_temp_$descrip,
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0(ind_serie_temp_$descrip,
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
    }else{
 plot <- paste0('Tabla ',ind_serie_temp_$descrip,' vacía')
}}
  else{
  if(nrow(data_filter)>0){
    data_filter$mes_año_format <- format(data_filter$month_year, "%Y-%m")
    plot <- ggplot(data_filter,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = ind_serie_temp_$descrip,
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0(ind_serie_temp_$descrip,
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
  }else{
  plot <- paste0('Tabla ',ind_serie_temp_$descrip,' vacía')
    
}} 
  return(plot)
}

result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}
result_plot_serie_temp$indicator_05
result_plot_serie_temp$indicator_06
result_plot_serie_temp$indicator_07
result_plot_serie_temp$indicator_08
result_plot_serie_temp$indicator_09
result_plot_serie_temp$indicator_10
result_plot_serie_temp$indicator_11
result_plot_serie_temp$indicator_12
result_plot_serie_temp$indicator_13
result_plot_serie_temp$indicator_14
result_plot_serie_temp$indicator_15
result_plot_serie_temp$indicator_21
result_plot_serie_temp$indicator_22
result_plot_serie_temp$indicator_23
result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

```{r}
result_plot_serie_temp$indicator_25
result_plot_serie_temp$indicator_26
result_plot_serie_temp$indicator_27
result_plot_serie_temp$indicator_28
result_plot_serie_temp$indicator_29
```

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}
result_plot_serie_temp$indicator_16
result_plot_serie_temp$indicator_17
result_plot_serie_temp$indicator_18
result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

```{r}
#| label: indicadores composite prod

log_info(paste0("Indicators composite"))

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)

data <- dbGetQuery(con, paste0("select *
from (
        select cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year,
            count(distinct composite) as n_composites,
            count(*) filter(
                where composite_bl
            ) as n_composites_true,
            round(n_composites_true * 100 / n_composites, 3) as perc_composite
        from composite_all
        group by cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year
    ) where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$año <- as.numeric(format(data$month_year, "%Y"))
plot <- ggplot(data=data, aes(x=month_year, y=perc_composite, group = month_year,
                              text = paste0(
      "Año-mes: ", mes_año_format,
      "\nMediana: ", median(perc_composite),
      "\nQ3: ", quantile(perc_composite, 0.75),
      "\nQ1: ", quantile(perc_composite, 0.25)
    ))) +
      geom_boxplot(color = 'black', alpha = 0.4) +
      labs(title = "Distribución porcentaje composite (opportunity based)",
           x = 'Fecha',
           y = '') + ylim(c(0,100)) +
  scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) + theme_minimal_hgrid()

      plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Distribución porcentaje composite (opportunity based) por episodio",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Distribución composite (opportunity based) vacía')
}

```



```{r}

data <- dbGetQuery(con, paste0("select *
from (
        select cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year,
            count(distinct composite) as n_composites,
            count(*) filter(
                where composite_bl
            ) as n_composites_true,
            round(n_composites_true * 100 / n_composites, 3) as perc_composite
        from composite_all
        group by cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year
    ) where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")

data <- data %>% mutate(episodes_100 = ifelse(perc_composite==100,1,0))
data <- data %>% group_by(mes_año_format,month_year,cohort) %>% 
  summarise(result=sum(episodes_100),
            n_episodes = length(unique(episode_id))) %>% 
  ungroup()
data$result <- round(100*(data$result/data$n_episodes),2)
plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nPorcentaje:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = '% episodios con composite (all-or-none)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('% episodios con composite (all-or-none)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        
        
plot
}else{
  print('Tabla composite (all-or-none) vacía')
}


```


<br>
<br>
<br>
<br>

### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome prod


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

ind_serie_temp_outcome <- data.frame(ind=c('indicator_35','indicator_36', 'indicator_36','indicator_36','indicator_36'),
                             descrip = c('Tasa de transfusión (hematíes)','Índice de transfusión (hematíes)',
                                         'Índice total de transfusión (hematíes)',
                                         'Índice total de transfusión (plaquetas)',
                                         'Índice total de transfusión (plasma)'),
                             code=c('HEM','HEM','HEM','PLAQ','PLAS'),
                             var=c('result','indice_transf','result','result','result'),
                             ind_plot=c('indicator_35','indicator_36_1', 'indicator_36_2','indicator_36_3','indicator_36_4')
                             )


p <-list()
plot_serie_temp_outcome <- function(i){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data_filter <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
    if(nrow(data_filter)>0){
      data_filter$mes_año_format <- format(data_filter$month_year, "%Y-%m")
      data_filter <- data_filter %>% filter(transftype_st %in% ind_serie_temp_$code)
    plot <- ggplot(data_filter,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = ind_serie_temp_$descrip,
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0(ind_serie_temp_$descrip,
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5))  
    }else{
      plot <- paste0('Tabla ',ind_serie_temp_$ind,' vacía')
}}
  else{
    if(nrow(data_filter)>0){
    data_filter$mes_año_format <- format(data_filter$month_year, "%Y-%m")
    data_filter <- data_filter %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,cohort,mes_año_format,var=ind_serie_temp_$var)
    plot <- ggplot(data_filter,aes(x = month_year, y=var,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", var))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = ind_serie_temp_$descrip,
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0(ind_serie_temp_$descrip,
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


    }else{
  plot <- paste0('Tabla ',ind_serie_temp_$descrip,' vacía')
}}
  return(plot)
  }

result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```

```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados prod

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')

log_info(paste0("Create composites"))

source('./aux_files/create_composites.R')

agregados <- dbExecute(con, "COPY (with datos_episodio as (
select * from (select patient_id,cnh_cd,episode_id,age_nm,sex_cd,admission_dt,round(epoch(discharge_dt - admission_dt)/86400,3) as los, discharge_type_cd,start_intervention_dt,asa_cd,brs_bl,eras_recovery_bl,
year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd from episode_view) a 
left join comorbidities b 
using(patient_id,cnh_cd,episode_id,admission_dt)
left join complications c
using(patient_id,cnh_cd,episode_id,admission_dt)
left join elixhauser d 
using(patient_id,cnh_cd,episode_id,admission_dt)
),
datos_cohort as (
select * from cirugia_oncologica_cohort
union all 
select * from cirugia_programada_cohort
union all
select * from cirugia_urgente_cohort
union all
select * from proceso_medico_cohort
)
select cnh_cd,cohort, category_cohort,count(distinct patient_id || '-' || episode_id) as n_unique_episode, median(age_nm) as mediana_edad,
(QUANTILE_CONT(age_nm, 0.75)-QUANTILE_CONT(age_nm, 0.25)) as iqr_age,
count(distinct patient_id || '-' || episode_id) filter(where sex_cd = '2') as n_mujeres,
count(*) filter(where discharge_type_cd = '4') as n_exitus,
median(los) as mediana_los,
sum(asa_cd::INT) filter(where asa_cd ='1') as asa_cd_1,
sum(asa_cd::INT) filter(where asa_cd ='2') as asa_cd_2,
sum(asa_cd::INT) filter(where asa_cd ='3') as asa_cd_3,
sum(asa_cd::INT) filter(where asa_cd ='4') as asa_cd_4,
sum(asa_cd::INT) filter(where asa_cd ='5') as asa_cd_5,
sum(asa_cd::INT) filter(where asa_cd ='6') as asa_cd_6,
sum(brs_bl::INT) as brs_bl,
sum(eras_recovery_bl::INT) as eras_recovery_bl,
sum(aids_bl::INT) as aids_bl,
sum(ami_bl::INT) as ami_bl,
sum(chf_bl::INT) as chf_bl,
sum(ckd_bl::INT) as ckd_bl,
sum(copd_bl::INT) as copd_bl,
sum(ctp_bl::INT) as ctp_bl,
sum(cvd_bl::INT) as cvd_bl,
sum(dementia_bl::INT) as dementia_bl,
sum(hemiplegia_bl::INT) as hemiplegia_bl,
sum(leuk_bl::INT) as leuk_bl,
sum(lymph_bl::INT) as lymph_bl,
sum(mildliver_bl::INT) as mildliver_bl,
sum(mtx_bl::INT) as mtx_bl,
sum(orgdiab_bl::INT) as orgdiab_bl,
sum(peptic_bl::INT) as peptic_bl,
sum(pvd_bl::INT) as pvd_bl,
sum(severeliver_bl::INT) as severeliver_bl,
sum(tumor_bl::INT) as tumor_bl,
sum(uncdiab_bl::INT) as uncdiab_bl,
sum(akic_bl::INT) as akic_bl,
sum(amic_bl::INT) as amic_bl,
sum(anastomotic_breakdown_bl::INT) as anastomotic_breakdown_bl,
sum(ardsc_bl::INT) as ardsc_bl,
sum(arrythc_bl::INT) as arrythc_bl,
sum(bloodinfc_bl::INT) as bloodinfc_bl,
sum(cardiacc_bl::INT) as cardiacc_bl,
sum(cpec_bl::INT) as cpec_bl,
sum(deliriumc_bl::INT) as deliriumc_bl,
sum(dvtc_bl::INT) as dvtc_bl,
sum(gastroc_bl::INT) as gastroc_bl,
sum(ileusc_bl::INT) as ileusc_bl,
sum(myoinfc_bl::INT) as myoinfc_bl,
sum(pneumc_bl::INT) as pneumc_bl,
sum(postophemc_bl::INT) as postophemc_bl,
sum(pulmemb_bl::INT) as pulmemb_bl,
sum(ssinfc_bl::INT) as ssinfc_bl,
sum(strokec_bl::INT) as strokec_bl,
sum(transfaec_bl::INT) as transfaec_bl,
sum(uncinfc_bl::INT) as uncinfc_bl,
sum(utic_bl::INT) as utic_bl,
sum(aids_bl::INT) as aids_bl_elix,
sum(alcohol_bl::INT) as alcohol_bl_elix,
sum(anemdef_bl::INT) as anemdef_bl_elix,
sum(autoimmune_bl::INT) as autoimmune_bl_elix,
sum(bldloss_bl::INT) as bldloss_bl_elix,
sum(cancer_leuk_bl::INT) as cancer_leuk_bl_elix,
sum(cancer_lymph_bl::INT) as cancer_lymph_bl_elix,
sum(cancer_mets_bl::INT) as cancer_mets_bl_elix,
sum(cancer_nsitu_bl::INT) as cancer_nsitu_bl_elix,
sum(cancer_solid_bl::INT) as cancer_solid_bl_elix,
sum(cbvd_poa_bl::INT) as cbvd_poa_bl_elix,
sum(cbvd_sqla_bl::INT) as cbvd_sqla_bl_elix,
sum(coag_bl::INT) as coag_bl_elix,
sum(dementia_bl::INT) as dementia_bl_elix,
sum(depress_bl::INT) as depress_bl_elix,
sum(diab_cx_bl::INT) as diab_cx_bl_elix,
sum(diab_uncx_bl::INT) as diab_uncx_bl_elix,
sum(drug_abuse_bl::INT) as drug_abuse_bl_elix,
sum(hf_bl::INT) as hf_bl_elix,
sum(htn_cx_bl::INT) as htn_cx_bl_elix,
sum(htn_uncx_bl::INT) as htn_uncx_bl_elix,
sum(liver_mld_bl::INT) as liver_mld_bl_elix,
sum(liver_sev_bl::INT) as liver_sev_bl_elix,
sum(lung_chronic_bl::INT) as lung_chronic_bl_elix,
sum(neuro_movt_bl::INT) as neuro_movt_bl_elix,
sum(neuro_oth_bl::INT) as neuro_oth_bl_elix,
sum(neuro_seiz_bl::INT) as neuro_seiz_bl_elix,
sum(obese_bl::INT) as obese_bl_elix,
sum(paralysis_bl::INT) as paralysis_bl_elix,
sum(perivasc_bl::INT) as perivasc_bl_elix,
sum(psychoses_bl::INT) as psychoses_bl_elix,
sum(pulmcirc_bl::INT) as pulmcirc_bl_elix,
sum(renlfl_mod_bl::INT) as renlfl_mod_bl_elix,
sum(renlfl_sev_bl::INT) as renlfl_sev_bl_elix,
sum(thyroid_hypo_bl::INT) as thyroid_hypo_bl_elix,
sum(thyroid_oth_bl::INT) as thyroid_oth_bl_elix,
sum(ulcer_peptic_bl::INT) as ulcer_peptic_bl_elix,
sum(valve_bl::INT) as valve_bl_elix,
sum(wghtloss_bl::INT) as wghtloss_bl_elix
from (
select * from datos_cohort a 
left join datos_episodio b 
using(patient_id,episode_id,start_intervention_dt)
)
group by cnh_cd,cohort, category_cohort
) TO '../../outputs/agregados_hospital_descriptivo.csv' (FORMAT csv, DELIMITER '|', 
HEADER)
")


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}

data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))

data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)


for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_15','indicator_23','indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
}

      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
  if(nrow(data)==0){
 data[1,] <- NA 
}
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### composite #####################################################

data <- dbGetQuery(con, paste0("select *
from (
        select cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year,
            count(distinct composite) as n_composites,
            count(*) filter(
                where composite_bl
            ) as n_composites_true,
            round(n_composites_true * 100 / n_composites, 3) as perc_composite
        from composite_all
        group by cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year
    ) where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}  
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% group_by(month_year) %>% 
  summarise(promedio=round(mean(perc_composite,na.rm=TRUE),2),
            mediana=round(median(perc_composite,na.rm=TRUE),2))

data$descrip <- 'Porcentaje composite (opportunity based) por episodio'


data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'composite_all'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con, paste0("select *
from (
        select cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year,
            count(distinct composite) as n_composites,
            count(*) filter(
                where composite_bl
            ) as n_composites_true,
            round(n_composites_true * 100 / n_composites, 3) as perc_composite
        from composite_all
        group by cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year
    ) where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
} 
  
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% mutate(episodes_100 = ifelse(perc_composite==100,1,0))
data <- data %>% group_by(month_year,cohort) %>% 
  summarise(result=sum(episodes_100),
            n_episodes = length(unique(episode_id))) %>% 
  ungroup()
data$result <- round(100*(data$result/data$n_episodes),2)

data$descrip <- '% episodios con composite (all-or-none)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'composite_all'
data_all <- rbind(data_all,data)

########################################################################

##### outcome #####################################################



for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
    if(nrow(data)==0){
 data[1,] <- NA 
} 
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
    if(nrow(data)==0){
 data[1,] <- NA 
}   
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
} 
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
} 
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
} 
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_46'
data_all <- rbind(data_all,data)
data_all$cohort <- cohort_

duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```






## Artroplastias primarias de cadera

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo pcad

log_info(paste0("Descriptive pcad"))

cohort_ <- 'pcad'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')

log_info(paste0("Create composites"))

source('./aux_files/create_composites.R')

dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.cirugia_programada_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}

dbDisconnect(con, shutdown=TRUE)


data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process pcad

log_info(paste0("Indicators pcad"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}
result_plot_serie_temp$indicator_05
result_plot_serie_temp$indicator_06
result_plot_serie_temp$indicator_07
result_plot_serie_temp$indicator_08
result_plot_serie_temp$indicator_09
result_plot_serie_temp$indicator_10
result_plot_serie_temp$indicator_11
result_plot_serie_temp$indicator_12
result_plot_serie_temp$indicator_13
result_plot_serie_temp$indicator_14
result_plot_serie_temp$indicator_15
result_plot_serie_temp$indicator_21
result_plot_serie_temp$indicator_22
result_plot_serie_temp$indicator_23
result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

```{r}
result_plot_serie_temp$indicator_25
result_plot_serie_temp$indicator_26
result_plot_serie_temp$indicator_27
result_plot_serie_temp$indicator_28
result_plot_serie_temp$indicator_29
```

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}
result_plot_serie_temp$indicator_16
result_plot_serie_temp$indicator_17
result_plot_serie_temp$indicator_18
result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

```{r}
#| label: indicadores composite pcad

log_info(paste0("Indicators composite"))

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)

data <- dbGetQuery(con, paste0("select *
from (
        select cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year,
            count(distinct composite) as n_composites,
            count(*) filter(
                where composite_bl
            ) as n_composites_true,
            round(n_composites_true * 100 / n_composites, 3) as perc_composite
        from composite_all
        group by cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year
    ) where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$año <- as.numeric(format(data$month_year, "%Y"))
plot <- ggplot(data=data, aes(x=month_year, y=perc_composite, group = month_year,
                              text = paste0(
      "Año-mes: ", mes_año_format,
      "\nMediana: ", median(perc_composite),
      "\nQ3: ", quantile(perc_composite, 0.75),
      "\nQ1: ", quantile(perc_composite, 0.25)
    ))) +
      geom_boxplot(color = 'black', alpha = 0.4) +
      labs(title = "Distribución porcentaje composite (opportunity based)",
           x = 'Fecha',
           y = '') + ylim(c(0,100)) +
  scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) + theme_minimal_hgrid()

      plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Distribución porcentaje composite (opportunity based) por episodio",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Distribución composite (opportunity based) vacía')
}

```



```{r}

data <- dbGetQuery(con, paste0("select *
from (
        select cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year,
            count(distinct composite) as n_composites,
            count(*) filter(
                where composite_bl
            ) as n_composites_true,
            round(n_composites_true * 100 / n_composites, 3) as perc_composite
        from composite_all
        group by cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year
    ) where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")

data <- data %>% mutate(episodes_100 = ifelse(perc_composite==100,1,0))
data <- data %>% group_by(mes_año_format,month_year,cohort) %>% 
  summarise(result=sum(episodes_100),
            n_episodes = length(unique(episode_id))) %>% 
  ungroup()
data$result <- round(100*(data$result/data$n_episodes),2)
plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nPorcentaje:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = '% episodios con composite (all-or-none)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('% episodios con composite (all-or-none)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        
        
plot
}else{
  print('Tabla composite (all-or-none) vacía')
}


```


<br>
<br>
<br>
<br>

### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome pcad


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)


p <-list()

result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```

```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados pcad

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')

log_info(paste0("Create composites"))

source('./aux_files/create_composites.R')


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
} 
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))

data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)


for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_15','indicator_23','indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
} 
      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
  if(nrow(data)==0){
 data[1,] <- NA 
} 
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### composite #####################################################

data <- dbGetQuery(con, paste0("select *
from (
        select cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year,
            count(distinct composite) as n_composites,
            count(*) filter(
                where composite_bl
            ) as n_composites_true,
            round(n_composites_true * 100 / n_composites, 3) as perc_composite
        from composite_all
        group by cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year
    ) where cohort = '",cohort_,"'"))

if(nrow(data)==0){
 data[1,] <- NA 
}   
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% group_by(month_year) %>% 
  summarise(promedio=round(mean(perc_composite,na.rm=TRUE),2),
            mediana=round(median(perc_composite,na.rm=TRUE),2))

data$descrip <- 'Porcentaje composite (opportunity based) por episodio'

data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'composite_all'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con, paste0("select *
from (
        select cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year,
            count(distinct composite) as n_composites,
            count(*) filter(
                where composite_bl
            ) as n_composites_true,
            round(n_composites_true * 100 / n_composites, 3) as perc_composite
        from composite_all
        group by cohort,
            category_cohort,
            patient_id,
            episode_id,
            month_year
    ) where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
  
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% mutate(episodes_100 = ifelse(perc_composite==100,1,0))
data <- data %>% group_by(month_year,cohort) %>% 
  summarise(result=sum(episodes_100),
            n_episodes = length(unique(episode_id))) %>% 
  ungroup()
data$result <- round(100*(data$result/data$n_episodes),2)

data$descrip <- '% episodios con composite (all-or-none)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'composite_all'
data_all <- rbind(data_all,data)

########################################################################

##### outcome #####################################################


for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
    if(nrow(data)==0){
 data[1,] <- NA 
}
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
      if(nrow(data)==0){
 data[1,] <- NA 
}
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_46'
data_all <- rbind(data_all,data)
data_all$cohort <- cohort_
duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```








## Cirugía de válvula cardiaca

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo icv

log_info(paste0("Descriptive icv"))

cohort_ <- 'icv'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.cirugia_programada_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}


dbDisconnect(con, shutdown=TRUE)


data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process icv

log_info(paste0("Indicators icv"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}
result_plot_serie_temp$indicator_05
result_plot_serie_temp$indicator_06
result_plot_serie_temp$indicator_07
result_plot_serie_temp$indicator_08
result_plot_serie_temp$indicator_09
result_plot_serie_temp$indicator_10
result_plot_serie_temp$indicator_11
result_plot_serie_temp$indicator_12
result_plot_serie_temp$indicator_13
result_plot_serie_temp$indicator_14
result_plot_serie_temp$indicator_15
result_plot_serie_temp$indicator_21
result_plot_serie_temp$indicator_22
result_plot_serie_temp$indicator_23
result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

```{r}
result_plot_serie_temp$indicator_25
result_plot_serie_temp$indicator_26
result_plot_serie_temp$indicator_27
result_plot_serie_temp$indicator_28
result_plot_serie_temp$indicator_29
```

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}
result_plot_serie_temp$indicator_16
result_plot_serie_temp$indicator_17
result_plot_serie_temp$indicator_18
result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

No se calculan estos indicadores para esta cohorte.

<br>
<br>


### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome icv


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```

```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados icv

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))

data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)


for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_15','indicator_23','indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
}
      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
  if(nrow(data)==0){
 data[1,] <- NA 
}
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### outcome #####################################################



for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
    if(nrow(data)==0){
 data[1,] <- NA 
}
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
      if(nrow(data)==0){
 data[1,] <- NA 
}
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))

data$month_year <- as.numeric(format(data$month_year, "%Y"))


data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')

data <- data %>% dplyr::select(descrip,result,month_year)

data$indicator <- 'indicator_46'

data_all <- rbind(data_all,data)

data_all$cohort <- cohort_
duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```



## Histerectomia abdominal no oncológica

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo hist_no_onco

log_info(paste0("Descriptive hist_no_onco"))

cohort_ <- 'hist_no_onco'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.cirugia_programada_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}


dbDisconnect(con, shutdown=TRUE)


data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```



```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process hist_no_onco

log_info(paste0("Indicators hist_no_onco"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}
result_plot_serie_temp$indicator_05
result_plot_serie_temp$indicator_06
result_plot_serie_temp$indicator_07
result_plot_serie_temp$indicator_08
result_plot_serie_temp$indicator_09
result_plot_serie_temp$indicator_10
result_plot_serie_temp$indicator_11
result_plot_serie_temp$indicator_12
result_plot_serie_temp$indicator_13
result_plot_serie_temp$indicator_14
result_plot_serie_temp$indicator_15
result_plot_serie_temp$indicator_21
result_plot_serie_temp$indicator_22
result_plot_serie_temp$indicator_23
result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

```{r}
result_plot_serie_temp$indicator_25
result_plot_serie_temp$indicator_26
result_plot_serie_temp$indicator_27
result_plot_serie_temp$indicator_28
result_plot_serie_temp$indicator_29
```

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}
result_plot_serie_temp$indicator_16
result_plot_serie_temp$indicator_17
result_plot_serie_temp$indicator_18
result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

No se calculan estos indicadores para esta cohorte.

<br>
<br>


### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome hist_no_onco


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)



p <-list()

result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```

```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados hist_no_onco

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)


for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_15','indicator_23','indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
}
      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
  if(nrow(data)==0){
 data[1,] <- NA 
}
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### outcome #####################################################


for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
    if(nrow(data)==0){
 data[1,] <- NA 
}
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
      if(nrow(data)==0){
 data[1,] <- NA 
}
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_46'
data_all <- rbind(data_all,data)
data_all$cohort <- cohort_
duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```



## Cistectomía radical 

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo cist_radical

log_info(paste0("Descriptive cist_radical"))

cohort_ <- 'cist_radical'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.cirugia_programada_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}


dbDisconnect(con, shutdown=TRUE)

data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process cist_radical

log_info(paste0("Indicators cist_radical"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}
result_plot_serie_temp$indicator_05
result_plot_serie_temp$indicator_06
result_plot_serie_temp$indicator_07
result_plot_serie_temp$indicator_08
result_plot_serie_temp$indicator_09
result_plot_serie_temp$indicator_10
result_plot_serie_temp$indicator_11
result_plot_serie_temp$indicator_12
result_plot_serie_temp$indicator_13
result_plot_serie_temp$indicator_14
result_plot_serie_temp$indicator_15
result_plot_serie_temp$indicator_21
result_plot_serie_temp$indicator_22
result_plot_serie_temp$indicator_23
result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

```{r}
result_plot_serie_temp$indicator_25
result_plot_serie_temp$indicator_26
result_plot_serie_temp$indicator_27
result_plot_serie_temp$indicator_28
result_plot_serie_temp$indicator_29
```

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}
result_plot_serie_temp$indicator_16
result_plot_serie_temp$indicator_17
result_plot_serie_temp$indicator_18
result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

No se calculan estos indicadores para esta cohorte.

<br>
<br>


### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome cist_radical


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

p <-list()

result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```

```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados cist_radical

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_15','indicator_23','indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
}
      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
  if(nrow(data)==0){
 data[1,] <- NA 
}
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### outcome #####################################################


for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
    if(nrow(data)==0){
 data[1,] <- NA 
}
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
      if(nrow(data)==0){
 data[1,] <- NA 
}
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_46'
data_all <- rbind(data_all,data)
data_all$cohort <- cohort_
duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```


## Cirugía colorectal laparoscópica

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo ncrl

log_info(paste0("Descriptive ncrl"))

cohort_ <- 'ncrl'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.cirugia_oncologica_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}

data_comorbidities <- dbGetQuery(con, paste0("select cohort,año_cd,count(distinct episode_id) as n_episode_id,
sum(aids_bl::INT) as 'SIDA',
sum(ami_bl::INT) as 'Infarto agudo miocardio',
sum(chf_bl::INT) as 'Insuficiencia cardíaca congestiva',
sum(ckd_bl::INT) as 'Enfermedad renal crónica',
sum(copd_bl::INT) as 'EPOC',
sum(ctp_bl::INT) as 'Patología del tejido conectivo',
sum(cvd_bl::INT) as 'Enfermedad cerebrovascular',
sum(dementia_bl::INT) as 'Demencia',
sum(hemiplegia_bl::INT) as 'Hemiplejia',
sum(leuk_bl::INT) as 'Leucemia',
sum(lymph_bl::INT) as 'Linfoma',
sum(mildliver_bl::INT) as 'Enfermedad Hepática Leve',
sum(mtx_bl::INT) as 'Metástasis',
sum(orgdiab_bl::INT) as 'DM con lesión orgánica',
sum(peptic_bl::INT) as 'Enfermedad ulcerosa',
sum(pvd_bl::INT) as 'Enfermedad vascular periférica',
sum(severeliver_bl::INT) as 'Enfermedad hepática moderada/grave',
sum(tumor_bl::INT) as 'Tumor sólido',
sum(uncdiab_bl::INT) as 'DM no complicada' from (
select a.cohort,year(a.start_intervention_dt) as año_cd ,b.* from cirugia_oncologica_cohort a
left join comorbidities b
on a.patient_id = b.patient_id and a.episode_id = b.episode_id ) group by cohort,año_cd"))

dbDisconnect(con, shutdown=TRUE)



data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process ncrl

log_info(paste0("Indicators ncrl"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)
ind_serie_temp_process <- data.frame(ind=c('indicator_05','indicator_06',
                                   'indicator_07','indicator_08','indicator_09','indicator_10',
                                   'indicator_11','indicator_12','indicator_13','indicator_14',
                                   'indicator_15','indicator_16','indicator_17','indicator_18',
                                   'indicator_21','indicator_22',
                                   'indicator_23','indicator_24','indicator_25','indicator_26',
                                   'indicator_27','indicator_28','indicator_29','indicator_30',
                                   'indicator_31','indicator_32'),
                             descrip = c('% de pacientes con evaluación de la anemia preoperatoria con tiempo suficiente',
                                          '% de pacientes anémicos en preoperatorio con estudio del metabolismo del hierro',
                                        '% de pacientes anémicos en preoperatorio con estudio del metabolismo del hierro (Hb<13)',
                                        '% de pacientes anémicos con determinación de concentración Hb reticulocitaria',
                                        '% de pacientes anémicos con determinación de concentración Hb reticulocitaria idem Hb<13',
                                        '% de pacientes anémicos tratados preoperatoriamente con tiempo suficiente',
                                        '% de pacientes anémicos tratados preoperatoriamente con tiempo suficiente Hb<13',
                                        '% de pacientes anémicos tratados preoperatoriamente con tiempo suficiente \n(anémicos y no anémicos)','% de pacientes con Hb de control',
                                        '% de pacientes tratados preoperatoriamente con un incremento de Hb de +1 pto',
                                        'Incremento de Hb post tratamiento preoperatorio',
                                        '% de pacientes no transfundidos con hematíes en preoperatorio',
                                        '% de pacientes no transfundidos con plasma en preoperatorio',
                                        '% de pacientes no transfundidos con plaquetas en preoperatorio',
                                        '% de pacientes intervenidos sin anemia',
                                        '% de pacientes intervenidos sin anemia Hb>=13',
                                        'Valor  de Hb previo a la intervención',
                                        '% de pacientes tratados postoperatoriamente con hierro IV',
                                        '% de pacientes con anestesia regional',
                                        '% de pacientes tratados con antifibrinolíticos',
                                        '% de pacientes con uso de recuperadores de sangre',
                                        '% de pacientes tratados con fibrinógeno',
                                        '% de pacientes tratados con fibrinógeno \nidem para todos, con y sin valor de conc.fibrin.',
                                        '% de pacientes transfundidos con Hb < 8 g/dl',
                                        'Valor de Hb previo a la transfusión',
                                        '% de transfusiones de una sola unidad de hematíes'))


result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}
result_plot_serie_temp$indicator_05
result_plot_serie_temp$indicator_06
result_plot_serie_temp$indicator_07
result_plot_serie_temp$indicator_08
result_plot_serie_temp$indicator_09
result_plot_serie_temp$indicator_10
result_plot_serie_temp$indicator_11
result_plot_serie_temp$indicator_12
result_plot_serie_temp$indicator_13
result_plot_serie_temp$indicator_14
result_plot_serie_temp$indicator_15
result_plot_serie_temp$indicator_21
result_plot_serie_temp$indicator_22
result_plot_serie_temp$indicator_23
result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

```{r}
result_plot_serie_temp$indicator_25
result_plot_serie_temp$indicator_26
result_plot_serie_temp$indicator_27
result_plot_serie_temp$indicator_28
result_plot_serie_temp$indicator_29
```

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}
result_plot_serie_temp$indicator_16
result_plot_serie_temp$indicator_17
result_plot_serie_temp$indicator_18
result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

No se calculan estos indicadores para esta cohorte.

<br>
<br>


### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome ncrl


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

ind_serie_temp_outcome <- data.frame(ind=c('indicator_35','indicator_36', 'indicator_36','indicator_36','indicator_36'),
                             descrip = c('Tasa de transfusión (hematíes)','Índice de transfusión (hematíes)',
                                         'Índice total de transfusión (hematíes)',
                                         'Índice total de transfusión (plaquetas)',
                                         'Índice total de transfusión (plasma)'),
                             code=c('HEM','HEM','HEM','PLAQ','PLAS'),
                             var=c('result','indice_transf','result','result','result'),
                             ind_plot=c('indicator_35','indicator_36_1', 'indicator_36_2','indicator_36_3','indicator_36_4')
                             )


p <-list()
result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```

```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados ncrl

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)


for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_15','indicator_23','indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
}
      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
        if(nrow(data)==0){
 data[1,] <- NA 
}
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### outcome #####################################################


for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
          if(nrow(data)==0){
 data[1,] <- NA 
}
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
            if(nrow(data)==0){
 data[1,] <- NA 
}
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_46'
data_all <- rbind(data_all,data)
data_all$cohort <- cohort_
duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```



## Cirugía colorectal abierta

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo ncra

log_info(paste0("Descriptive ncra"))

cohort_ <- 'ncra'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.cirugia_oncologica_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}


dbDisconnect(con, shutdown=TRUE)



data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```



```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process ncra

log_info(paste0("Indicators ncra"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}
result_plot_serie_temp$indicator_05
result_plot_serie_temp$indicator_06
result_plot_serie_temp$indicator_07
result_plot_serie_temp$indicator_08
result_plot_serie_temp$indicator_09
result_plot_serie_temp$indicator_10
result_plot_serie_temp$indicator_11
result_plot_serie_temp$indicator_12
result_plot_serie_temp$indicator_13
result_plot_serie_temp$indicator_14
result_plot_serie_temp$indicator_15
result_plot_serie_temp$indicator_21
result_plot_serie_temp$indicator_22
result_plot_serie_temp$indicator_23
result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

```{r}
result_plot_serie_temp$indicator_25
result_plot_serie_temp$indicator_26
result_plot_serie_temp$indicator_27
result_plot_serie_temp$indicator_28
result_plot_serie_temp$indicator_29
```

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}
result_plot_serie_temp$indicator_16
result_plot_serie_temp$indicator_17
result_plot_serie_temp$indicator_18
result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

No se calculan estos indicadores para esta cohorte.

<br>
<br>


### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome ncra


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)




p <-list()

result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```

```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados ncra

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)


for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_15','indicator_23','indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
}
      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
        if(nrow(data)==0){
 data[1,] <- NA 
}
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### outcome #####################################################



for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
          if(nrow(data)==0){
 data[1,] <- NA 
}
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
      if(nrow(data)==0){
 data[1,] <- NA 
}
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_46'
data_all <- rbind(data_all,data)
data_all$cohort <- cohort_
duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```



## Histerectomia abdominal oncológica

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo hist_onco

log_info(paste0("Descriptive hist_onco"))

cohort_ <- 'hist_onco'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.cirugia_oncologica_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}


dbDisconnect(con, shutdown=TRUE)


data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process hist_onco

log_info(paste0("Indicators hist_onco"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}
result_plot_serie_temp$indicator_05
result_plot_serie_temp$indicator_06
result_plot_serie_temp$indicator_07
result_plot_serie_temp$indicator_08
result_plot_serie_temp$indicator_09
result_plot_serie_temp$indicator_10
result_plot_serie_temp$indicator_11
result_plot_serie_temp$indicator_12
result_plot_serie_temp$indicator_13
result_plot_serie_temp$indicator_14
result_plot_serie_temp$indicator_15
result_plot_serie_temp$indicator_21
result_plot_serie_temp$indicator_22
result_plot_serie_temp$indicator_23
result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

```{r}
result_plot_serie_temp$indicator_25
result_plot_serie_temp$indicator_26
result_plot_serie_temp$indicator_27
result_plot_serie_temp$indicator_28
result_plot_serie_temp$indicator_29
```

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}
result_plot_serie_temp$indicator_16
result_plot_serie_temp$indicator_17
result_plot_serie_temp$indicator_18
result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

No se calculan estos indicadores para esta cohorte.

<br>
<br>


### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome hist_onco


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)
result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados hist_onco

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_15','indicator_23','indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
}
      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
  if(nrow(data)==0){
 data[1,] <- NA 
}
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### outcome #####################################################



for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
    if(nrow(data)==0){
 data[1,] <- NA 
}
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
      if(nrow(data)==0){
 data[1,] <- NA 
}
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_46'
data_all <- rbind(data_all,data)
data_all$cohort <- cohort_
duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```



## Cirugía de fractura de fémur proximal

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo ffem

log_info(paste0("Descriptive ffem"))

cohort_ <- 'ffem'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.cirugia_urgente_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}

data_comorbidities <- dbGetQuery(con, paste0("select cohort,año_cd,count(distinct episode_id) as n_episode_id,
sum(aids_bl::INT) as 'SIDA',
sum(ami_bl::INT) as 'Infarto agudo miocardio',
sum(chf_bl::INT) as 'Insuficiencia cardíaca congestiva',
sum(ckd_bl::INT) as 'Enfermedad renal crónica',
sum(copd_bl::INT) as 'EPOC',
sum(ctp_bl::INT) as 'Patología del tejido conectivo',
sum(cvd_bl::INT) as 'Enfermedad cerebrovascular',
sum(dementia_bl::INT) as 'Demencia',
sum(hemiplegia_bl::INT) as 'Hemiplejia',
sum(leuk_bl::INT) as 'Leucemia',
sum(lymph_bl::INT) as 'Linfoma',
sum(mildliver_bl::INT) as 'Enfermedad Hepática Leve',
sum(mtx_bl::INT) as 'Metástasis',
sum(orgdiab_bl::INT) as 'DM con lesión orgánica',
sum(peptic_bl::INT) as 'Enfermedad ulcerosa',
sum(pvd_bl::INT) as 'Enfermedad vascular periférica',
sum(severeliver_bl::INT) as 'Enfermedad hepática moderada/grave',
sum(tumor_bl::INT) as 'Tumor sólido',
sum(uncdiab_bl::INT) as 'DM no complicada' from (
select a.cohort,year(a.start_intervention_dt) as año_cd ,b.* from cirugia_urgente_cohort a
left join comorbidities b
on a.patient_id = b.patient_id and a.episode_id = b.episode_id ) group by cohort,año_cd"))

dbDisconnect(con, shutdown=TRUE)



data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```



```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process ffem

log_info(paste0("Indicators ffem"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)
ind_serie_temp_process <- data.frame(ind=c('indicator_05','indicator_06',
                                   'indicator_07','indicator_08','indicator_09','indicator_10',
                                   'indicator_11','indicator_12','indicator_13','indicator_14',
                                   'indicator_15','indicator_16','indicator_17','indicator_18',
                                   'indicator_19','indicator_20','indicator_21','indicator_22',
                                   'indicator_23','indicator_24','indicator_25','indicator_26',
                                   'indicator_27','indicator_28','indicator_29','indicator_30',
                                   'indicator_31','indicator_32'),
                             descrip = c('% de pacientes con evaluación de la anemia preoperatoria con tiempo suficiente',
                                          '% de pacientes anémicos en preoperatorio con estudio del metabolismo del hierro',
                                        '% de pacientes anémicos en preoperatorio con estudio del metabolismo del hierro (Hb<13)',
                                        '% de pacientes anémicos con determinación de concentración Hb reticulocitaria',
                                        '% de pacientes anémicos con determinación de concentración Hb reticulocitaria idem Hb<13',
                                        '% de pacientes anémicos tratados preoperatoriamente con tiempo suficiente',
                                        '% de pacientes anémicos tratados preoperatoriamente con tiempo suficiente Hb<13',
                                        '% de pacientes anémicos tratados preoperatoriamente con tiempo suficiente \n(anémicos y no anémicos)','% de pacientes con Hb de control',
                                        '% de pacientes tratados preoperatoriamente con un incremento de Hb de +1 pto',
                                        'Incremento de Hb post tratamiento preoperatorio',
                                        '% de pacientes no transfundidos con hematíes en preoperatorio',
                                        '% de pacientes no transfundidos con plasma en preoperatorio',
                                        '% de pacientes no transfundidos con plaquetas en preoperatorio',
                                        'Días de estancia preoperatoria',
                                        '% de pacientes intervenidos en <48 h desde la admisión',
                                        '% de pacientes intervenidos sin anemia',
                                        '% de pacientes intervenidos sin anemia Hb>=13',
                                        'Valor  de Hb previo a la intervención',
                                        '% de pacientes tratados postoperatoriamente con hierro IV',
                                        '% de pacientes con anestesia regional',
                                        '% de pacientes tratados con antifibrinolíticos',
                                        '% de pacientes con uso de recuperadores de sangre',
                                        '% de pacientes tratados con fibrinógeno',
                                        '% de pacientes tratados con fibrinógeno \nidem para todos, con y sin valor de conc.fibrin.',
                                        '% de pacientes transfundidos con Hb < 8 g/dl',
                                        'Valor de Hb previo a la transfusión',
                                        '% de transfusiones de una sola unidad de hematíes'))



result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}
result_plot_serie_temp$indicator_05
result_plot_serie_temp$indicator_06
result_plot_serie_temp$indicator_07
result_plot_serie_temp$indicator_08
result_plot_serie_temp$indicator_09
result_plot_serie_temp$indicator_10
result_plot_serie_temp$indicator_11
result_plot_serie_temp$indicator_12
result_plot_serie_temp$indicator_13
result_plot_serie_temp$indicator_14
result_plot_serie_temp$indicator_15
result_plot_serie_temp$indicator_21
result_plot_serie_temp$indicator_22
result_plot_serie_temp$indicator_23
result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

```{r}
result_plot_serie_temp$indicator_25
result_plot_serie_temp$indicator_26
result_plot_serie_temp$indicator_27
result_plot_serie_temp$indicator_28
result_plot_serie_temp$indicator_29
```

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}
result_plot_serie_temp$indicator_16
result_plot_serie_temp$indicator_17
result_plot_serie_temp$indicator_18
result_plot_serie_temp$indicator_19
result_plot_serie_temp$indicator_20
result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

No se calculan estos indicadores para esta cohorte.

<br>
<br>


### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome ffem


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

ind_serie_temp_outcome <- data.frame(ind=c('indicator_35','indicator_36', 'indicator_36','indicator_36','indicator_36'),
                             descrip = c('Tasa de transfusión (hematíes)','Índice de transfusión (hematíes)',
                                         'Índice total de transfusión (hematíes)',
                                         'Índice total de transfusión (plaquetas)',
                                         'Índice total de transfusión (plasma)'),
                             code=c('HEM','HEM','HEM','PLAQ','PLAS'),
                             var=c('result','indice_transf','result','result','result'),
                             ind_plot=c('indicator_35','indicator_36_1', 'indicator_36_2','indicator_36_3','indicator_36_4')
                             )


result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```

```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados ffem

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)


for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_15','indicator_19','indicator_23','indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
}
      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
  if(nrow(data)==0){
 data[1,] <- NA 
}
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### outcome #####################################################



for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
    if(nrow(data)==0){
 data[1,] <- NA 
}
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
      if(nrow(data)==0){
 data[1,] <- NA 
}
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_46'
data_all <- rbind(data_all,data)
data_all$cohort <- cohort_
duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```



## Hemorragia gastrointestinal

### 1) Descriptivo


```{r,output=FALSE}
#| label: descriptivo hdig

log_info(paste0("Descriptive hdig"))

cohort_ <- 'hdig'

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

source('./aux_files/create_cohorts_month.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


dbDisconnect(con_result, shutdown=TRUE)

data_piramide <- dbGetQuery(con, paste0("select cohort,count(distinct episode_id) as n_episode_id,
grupo_edad_cd, sex_cd,año_cd
from(
select *,year(start_intervention_dt) as año_cd,
CASE
		WHEN age_nm >= 0
		and age_nm <= 4 THEN '00-04 años'
		WHEN age_nm >= 5
		and age_nm <= 9 THEN '05-09 años'
		WHEN age_nm >= 10
		and age_nm <= 14 THEN '10-14 años'
		WHEN age_nm >= 15
		and age_nm <= 19 THEN '15-19 años'
		WHEN age_nm >= 20
		and age_nm <= 24 THEN '20-24 años'
		WHEN age_nm >= 25
		and age_nm <= 29 THEN '25-29 años'
		WHEN age_nm >= 30
		and age_nm <= 34 THEN '30-34 años'
		WHEN age_nm >= 35
		and age_nm <= 39 THEN '35-39 años'
		WHEN age_nm >= 40
		and age_nm <= 44 THEN '40-44 años'
		WHEN age_nm >= 45
		and age_nm <= 49 THEN '45-49 años'
		WHEN age_nm >= 50
		and age_nm <= 54 THEN '50-54 años'
		WHEN age_nm >= 55
		and age_nm <= 59 THEN '55-59 años'
		WHEN age_nm >= 60
		and age_nm <= 64 THEN '60-64 años'
		WHEN age_nm >= 65
		and age_nm <= 69 THEN '65-69 años'
		WHEN age_nm >= 70
		and age_nm <= 74 THEN '70-74 años'
		WHEN age_nm >= 75
		and age_nm <= 79 THEN '75-79 años'
		WHEN age_nm >= 80
		and age_nm <= 84 THEN '80-84 años'
		WHEN age_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd 
FROM
    main.proceso_medico_cohort) group by cohort, grupo_edad_cd, sex_cd,año_cd"))

data_ <- data_piramide %>% filter(año_cd %in% max(data_piramide$año_cd)) %>% 
  filter(cohort %in% cohort_)
data_$grupo_edad_cd <- as.factor(data_$grupo_edad_cd)
data_$sex_cd[data_$sex_cd %in% 1] <- 'Hombres'
data_$sex_cd[data_$sex_cd %in% 2] <- 'Mujeres'
data_$sex_cd <- factor(data_$sex_cd)
data_ <- data_[order(data_$grupo_edad_cd),]


data_ <- data_ %>% mutate(percent = round(100*(n_episode_id/sum(n_episode_id)),1))


nudge_fun <- function(df){
  ifelse(df$sex_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- data_ %>%
  mutate(
    n_episode_id = ifelse(sex_cd=="Hombres", n_episode_id*(-1), n_episode_id*1), 
    percent = ifelse(sex_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sex_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(data_)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de episodios con intervención (",data_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())


```

```{r}
#| fig-align: center

p
```



```{r,output=FALSE}

data_comorbidities <- dbGetQuery(con, paste0("select cohort,año_cd,count(distinct episode_id) as n_episode_id,
sum(aids_bl::INT) as 'SIDA',
sum(ami_bl::INT) as 'Infarto agudo miocardio',
sum(chf_bl::INT) as 'Insuficiencia cardíaca congestiva',
sum(ckd_bl::INT) as 'Enfermedad renal crónica',
sum(copd_bl::INT) as 'EPOC',
sum(ctp_bl::INT) as 'Patología del tejido conectivo',
sum(cvd_bl::INT) as 'Enfermedad cerebrovascular',
sum(dementia_bl::INT) as 'Demencia',
sum(hemiplegia_bl::INT) as 'Hemiplejia',
sum(leuk_bl::INT) as 'Leucemia',
sum(lymph_bl::INT) as 'Linfoma',
sum(mildliver_bl::INT) as 'Enfermedad Hepática Leve',
sum(mtx_bl::INT) as 'Metástasis',
sum(orgdiab_bl::INT) as 'DM con lesión orgánica',
sum(peptic_bl::INT) as 'Enfermedad ulcerosa',
sum(pvd_bl::INT) as 'Enfermedad vascular periférica',
sum(severeliver_bl::INT) as 'Enfermedad hepática moderada/grave',
sum(tumor_bl::INT) as 'Tumor sólido',
sum(uncdiab_bl::INT) as 'DM no complicada' from (
select a.cohort,year(a.start_intervention_dt) as año_cd ,b.* from proceso_medico_cohort a
left join comorbidities b
on a.patient_id = b.patient_id and a.episode_id = b.episode_id ) group by cohort,año_cd"))

dbDisconnect(con, shutdown=TRUE)



data <- data_comorbidities %>% filter(año_cd %in% max(data_comorbidities$año_cd)) %>% 
  filter(cohort %in% cohort_)

data <- data %>% pivot_longer(!c(cohort,año_cd,n_episode_id),names_to = 'comor',values_to = 'count')
data$percent <- round(100*(data$count/data$n_episode_id),1)

data$comor_ <- paste(data$comor, paste0(data$percent,'%'), sep = "\n")
data$comor__ <- paste0("La comorbilidad ",data$comor," está presente en el ",data$percent," % de los episodios")
data <- data %>% dplyr::select(level1=comor,size=percent)

fig <- plot_ly(
  data = data,
  labels = ~level1,
  parents = "",         
  values = ~size,
  type = "sunburst",
  branchvalues = "total",
  hovertemplate = "%{label}: %{value}%<extra></extra>"
)
```


```{r}
#| fig-align: center

fig <- fig %>% layout(title='% de episodios que presentantan cada comorbilidad')
fig
```



```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de la 1º Hb antes de la cirugía",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de la 1º Hb antes de la cirugía",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de la 1º Hb antes de la cirugía vacía')
}

```


```{r}

if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nValor:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = "Prevalencia anemia preoperatoria (Hb<13) en %",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() + ylim(c(0,100)) +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Prevalencia anemia preoperatoria (Hb<13) en %",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 


plot
}else{
  print('Tabla Prevalencia anemia preoperatoria (Hb<13) en % vacía')
}
dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>


### 2) Indicadores *Process*

```{r,output=FALSE}
#| label: indicadores process hdig

log_info(paste0("Indicators hdig"))

con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)
ind_serie_temp_process <- data.frame(ind=c('indicator_24','indicator_30',
                                   'indicator_31','indicator_32'),
                             descrip = c('% de pacientes tratados postoperatoriamente con hierro IV',
                                        '% de pacientes transfundidos con Hb < 8 g/dl',
                                        'Valor de Hb previo a la transfusión',
                                        '% de transfusiones de una sola unidad de hematíes'))



result_plot_serie_temp <- setNames(
    lapply(ind_serie_temp_process$ind, plot_serie_temp),
    ind_serie_temp_process$ind
)

dbDisconnect(con_result, shutdown=TRUE)
```

<br>


#### 2.1) Pilar I

```{r}

result_plot_serie_temp$indicator_24

```

<br>
<br>
<br>
<br>

#### 2.2) Pilar II

No se calculan estos indicadores para esta cohorte.

<br>
<br>
<br>
<br>

#### 2.3) Pilar III

```{r}

result_plot_serie_temp$indicator_30
result_plot_serie_temp$indicator_31
result_plot_serie_temp$indicator_32
```

<br>
<br>
<br>
<br>

### 3) Indicadores *composite*

No se calculan estos indicadores para esta cohorte.

<br>
<br>


### 4) Indicadores *outcome*


```{r,output=FALSE}
#| label: indicadores outcome hdig


log_info(paste0("Indicators outcome"))

# indi: 35-39
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

ind_serie_temp_outcome <- data.frame(ind=c('indicator_35','indicator_36', 'indicator_36','indicator_36','indicator_36'),
                             descrip = c('Tasa de transfusión (hematíes)','Índice de transfusión (hematíes)',
                                         'Índice total de transfusión (hematíes)',
                                         'Índice total de transfusión (plaquetas)',
                                         'Índice total de transfusión (plasma)'),
                             code=c('HEM','HEM','HEM','PLAQ','PLAS'),
                             var=c('result','indice_transf','result','result','result'),
                             ind_plot=c('indicator_35','indicator_36_1', 'indicator_36_2','indicator_36_3','indicator_36_4')
                             )

result_plot_serie_temp_outcome1 <- setNames(
    lapply(1:nrow(ind_serie_temp_outcome), plot_serie_temp_outcome),
    ind_serie_temp_outcome$ind_plot
)


dbDisconnect(con_result, shutdown=TRUE)

```



```{r}

result_plot_serie_temp_outcome1$indicator_35
result_plot_serie_temp_outcome1$indicator_36_1
result_plot_serie_temp_outcome1$indicator_36_2
result_plot_serie_temp_outcome1$indicator_36_3
result_plot_serie_temp_outcome1$indicator_36_4

```


```{r}
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes no transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes no transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes no transfundidos vacía')
}


```

```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de Hb al alta en pacientes transfundidos",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de Hb al alta en pacientes transfundidos",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de Hb al alta en pacientes transfundidos vacía')
}

```



```{r}

data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
data$mes_año_format <- format(data$month_year, "%Y-%m")
    data_long <- data %>%
            select(month_year, mes_año_format, cohort, promedio, mediana) %>%
            pivot_longer(
                cols = c(promedio, mediana),
                names_to = "metrica",
                values_to = "valor"
            )
    plot <- ggplot(data_long, aes(x = month_year, y = valor, group = interaction(cohort, metrica), color = metrica)) +
            geom_point(aes(text = paste("Año-mes:", mes_año_format, "\n", metrica, ":", valor)), size = 0.5) +
            geom_line() +
    labs(title = "Promedio y mediana de días de estancia hospitalaria",
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0("Promedio y mediana de días de estancia hospitalaria",
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 
        
plot
}else{
  print('Tabla Promedio y mediana de días de estancia hospitalaria vacía')
}

```

```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Reingresos 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Reingresos 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Reingresos 30 días vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=result,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", result))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Mortalidad intra-hospitalaria',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Mortalidad intra-hospitalaria',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Mortalidad intra-hospitalaria vacía')
}
```


```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    plot <- ggplot(data,aes(x = month_year, y=n_episode_complicaciones,group = cohort,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", n_episode_complicaciones))) +
      geom_point(size=0.5) +
  geom_line() +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días (overall)',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días (overall)',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.5)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (overall) vacía')
    }
```



```{r}
data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data>0)){
  
    data$mes_año_format <- format(data$month_year, "%Y-%m")
    data <- data %>% pivot_longer(!c(cohort,category_cohort,mes_año_format,month_year),names_to = 'complc',values_to = 'count')
    plot <- ggplot(data,aes(x = month_year, y=count,group = complc,
                                   text = paste("Año-mes:", mes_año_format, "\nN:", count))) +
      geom_point(aes(color = complc),size=0.5) +
  geom_line(aes(color = complc)) +
    labs(title = 'Nº episodios con complicaciones postoperatorias a 30 días',
       y = '',
       x = 'Fecha',
       color=NULL) + scale_x_date(
    date_breaks = "4 months",
    date_labels = "%Y-%m",
    limits = as.Date(c("2021-12-01", "2025-01-01"))
) +
  theme_minimal_hgrid() +
      theme(title = element_text(size = 12),legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot,tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº episodios con complicaciones postoperatorias a 30 días',
                                    '<br>',
                                    '<sup>','</sup>')),
         legend = list(orientation = "h", y= -0.3)) 

        plot

    }else{
  print('Tabla Con complicaciones postoperatorias a 30 días (por complicación) vacía')
    }

dbDisconnect(con_result, shutdown=TRUE)
```

<br>
<br>
<br>
<br>

### 5) Tabla indicadores

```{r,output=FALSE}
#| label: agregados hdig

con <- dbConnect(duckdb::duckdb(), dbdir = database_path, read_only=FALSE)
con_result <- dbConnect(duckdb::duckdb(), dbdir = database_result_path, read_only=FALSE)

log_info(paste0("Create cohorts"))
source('./aux_files/create_cohorts_year.R')

log_info(paste0("Calculate indicators"))

source('./aux_files/calculate_indicators.R')


data_all <- data.frame()

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de la 1º Hb antes de la cirugía'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_01 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- round(100*(data$n_episodios_l13/data$n_episodios),2)

data$descrip <- 'Prevalencia anemia preoperatoria (Hb<13) en %'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_01'
data_all <- rbind(data_all,data)

ind_serie_temp_process <- data.frame(ind=c('indicator_24','indicator_30',
                                   'indicator_31','indicator_32'),
                             descrip = c('% de pacientes tratados postoperatoriamente con hierro IV',
                                        '% de pacientes transfundidos con Hb < 8 g/dl',
                                        'Valor de Hb previo a la transfusión',
                                        '% de transfusiones de una sola unidad de hematíes'))

for(i in ind_serie_temp_process$ind){
  data <- dbGetQuery(con_result, paste0("select * from ",i," where cohort = '",cohort_,"'"))
  ind_serie_temp_ <- ind_serie_temp_process %>% filter(ind %in% i)
    if(i %in% c('indicator_31')){
      if(nrow(data)==0){
 data[1,] <- NA 
}
      data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)
      data$descrip <- ind_serie_temp_$descrip
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- i
}else{
  if(nrow(data)==0){
 data[1,] <- NA 
}
    data$descrip <- ind_serie_temp_$descrip
    data$result <- round(data$result,2)
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data <- data %>% dplyr::select(descrip,result,month_year)
    data$indicator <- i
  }

  data_all <- rbind(data_all,data)
      
} 

##### outcome #####################################################



for(i in 1:nrow(ind_serie_temp_outcome)){
  ind_serie_temp_ <- ind_serie_temp_outcome[i,]
  data <- dbGetQuery(con_result, paste0("select * from ",ind_serie_temp_$ind," where cohort = '",cohort_,"'"))
  if(ind_serie_temp_$ind %in% c('indicator_35')){
    if(nrow(data)==0){
 data[1,] <- NA 
}
      data$month_year <- as.numeric(format(data$month_year, "%Y"))
      data <- data %>% filter(transftype_st %in% ind_serie_temp_$code)
      data$descrip <- ind_serie_temp_$descrip
      data <- data %>% dplyr::select(descrip,result,month_year)
      data$indicator <- ind_serie_temp_$ind
    }else{
      if(nrow(data)==0){
 data[1,] <- NA 
}
    data$month_year <- as.numeric(format(data$month_year, "%Y"))
    data$descrip <- ind_serie_temp_$descrip
    data <- data %>% filter(transftype_st %in% ind_serie_temp_$code) %>% 
      dplyr::select(month_year,descrip,result=ind_serie_temp_$var)
    data$indicator <- ind_serie_temp_$ind
}
    data_all <- rbind(data_all,data)
  }


data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl is false"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes no transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_40 where cohort = '",cohort_,"' and transfundido_bl"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de Hb al alta en pacientes transfundidos'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_40'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_42 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$result <- paste0('Promedio: ',data$promedio,' y Mediana: ', data$mediana)

data$descrip <- 'Promedio y mediana de días de estancia hospitalaria'
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_42'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select * from indicator_43 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- 'Nº reingresos 30 días'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_43'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_44 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data$descrip <- 'Nº muertos intra-hospitalarios'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_44'
data_all <- rbind(data_all,data)


data <- dbGetQuery(con_result, paste0("select *,n_episode_complicaciones as result from indicator_45 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))

data <- data %>% group_by(month_year) %>% summarise(result=sum(result,na.rm = TRUE))

data$descrip <- 'Nº episodios con complicaciones postoperatorias a 30 días (overall)'
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_45'
data_all <- rbind(data_all,data)

data <- dbGetQuery(con_result, paste0("select * from indicator_46 where cohort = '",cohort_,"'"))
if(nrow(data)==0){
 data[1,] <- NA 
}
data$month_year <- as.numeric(format(data$month_year, "%Y"))
data <- data %>% pivot_longer(!c(cohort,category_cohort,month_year),names_to = 'complc',values_to = 'result')

data <- data %>% group_by(month_year,complc) %>% summarise(result=sum(result,na.rm = TRUE))
data$descrip <- paste0('Nº episodios con complicaciones postoperatorias a 30 días (',data$complc,')')
data <- data %>% dplyr::select(descrip,result,month_year)
data$indicator <- 'indicator_46'
data_all <- rbind(data_all,data)
data_all$cohort <- cohort_
duckdb_register(con_result,"datos_promedio",data_all)

data_all <- dbGetQuery(con_result, 
"with datos as (
select
	descrip,
	replace(descrip, 'y mediana', '') as descrip_promedio,
	trim(trim(replace(replace(descrip, 'Promedio y', ''), 'mediana', 'Mediana'))) as descrip_mediana,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from
	(
	select
		*
	from
		datos_promedio
	where
		descrip like 'Promedio y mediana%')
),
datos_resto as (select * from datos_promedio 
where descrip not like 'Promedio y mediana%' and (indicator not in ('indicator_15','indicator_19','indicator_23','indicator_31','composite_all') and result not like 'Promedio%')),
datos_promedios as (
select descrip || ' (mediana)' as descrip_mediana,
	descrip || ' (promedio)' as descrip_promedio,
	month_year,
	indicator,
	cohort,
	replace(split_part(result, 'y', 1), 'Promedio: ', '') as promedio,
	trim(replace(split_part(result, 'y', 2), 'Mediana: ', '')) as mediana
from (select * from datos_promedio where indicator in ('indicator_15', 'indicator_19', 'indicator_23', 'indicator_31', 'composite_all')
			and result like 'Promedio%'))
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos
union all 
select
	descrip_promedio as descrip,
	trim(promedio) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
union all 
select
	descrip_mediana as descrip,
	trim(mediana) as result,
	month_year,
	indicator,
	cohort
from
	datos_promedios
	union all 
	select * from datos_resto
")
duckdb_unregister(con_result,"datos_promedio")
data_all$result[data_all$result %in% "NA"] <- NA
data_all$hospital <- unique(hospital$cnh_cd)
write.table(data_all,paste0('../../outputs/tabla_indicadores_agregado_anual_',cohort_,'.csv'),sep='|',row.names=FALSE)
###########################################################################

data_all <- data_all %>% group_by(descrip) %>% 
  filter(month_year %in% max(month_year)) %>% ungroup()

dbDisconnect(con, shutdown=TRUE)
dbDisconnect(con_result, shutdown=TRUE)
```


```{r}
data_all <- data_all %>% dplyr::select(month_year,description=descrip,result)
data_all %>% 
  gt() %>% 
    cols_label(
    description = 'Indicador',
    month_year = 'Año',
    result = 'Resultado'
  ) %>%
  cols_align(
  align =  "left",
  columns = "description"
) %>% 
  cols_align(
    align = "center",
    columns = c(month_year, result)
  ) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)
```



:::